<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright [2018] [Henter Liu]

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Jedis Pool -->
	<bean id="redisClusterPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- The cap on the number of objects that can be allocated by the pool (checked out to clients, or idle awaiting checkout) at a given time. -->
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<!-- The maximum number of objects that can sit idle in the pool at any time. -->
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<!-- The number of objects examined in each run of the idle object evictor. -->
		<property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}" />
		<!-- How long the eviction thread should sleep before "runs" of examining idle objects. -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<!-- The minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due to idle time. -->
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}" />
		<!-- The minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any), with the extra condition that at least "minIdle" object instances remain in the pool. -->
		<property name="softMinEvictableIdleTimeMillis" value="${redis.pool.softMinEvictableIdleTimeMillis}" />
		<!-- The maximum amount of time (in milliseconds) the borrowObject() method should block before throwing an exception when the pool is exhausted and BlockWhenExhausted is true. -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<!-- Whether or not the pool will attempt to validate each object before it is returned from the borrowObject() method. -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<!-- Whether or not idle objects should be validated using the factory's PoolableObjectFactory.validateObject(T) method. -->
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
		<!-- Whether to block when the borrowObject() method is invoked when the pool is exhausted (the maximum number of "active" objects has been reached). -->
		<property name="blockWhenExhausted" value="${redis.pool.blockWhenExhausted}" />
	</bean>

	<!-- Redis Cluster Configuration -->
	<bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<property name="maxRedirects" value="${redis.maxRedirects}"></property>
		<property name="clusterNodes">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.host1}" />
					<constructor-arg name="port" value="${redis.port1}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.host2}" />
					<constructor-arg name="port" value="${redis.port2}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.host3}" />
					<constructor-arg name="port" value="${redis.port3}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.host4}" />
					<constructor-arg name="port" value="${redis.port4}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.host5}" />
					<constructor-arg name="port" value="${redis.port5}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.host6}" />
					<constructor-arg name="port" value="${redis.port6}" />
				</bean>
			</set>
		</property>
	</bean>

	<!-- Jedis Connection Factory -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg name="poolConfig" ref="redisClusterPoolConfig" />
		<constructor-arg name="clusterConfig" ref="redisClusterConfiguration" />
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<!-- <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" /> -->
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>
</beans>